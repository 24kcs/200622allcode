/**
 * 
 * 1. let 关键字
 *  1) 声明或者定义变量的时候的语法和var是一样的
 *  2) 有自己的块级作用域
 *  3) 不允许重名
 *  4) 不影响作用域链
 *  
 * 2. const 关键字
 *  1) 使用方式和let比较类似(const声明的变量一定要有初始化,而且是常量)
 *  2) 一般情况,常量的名字是大写的
 *  3) const定义的变量,其实叫常量,值是不可以修改的
 *  4) const定义的常量的值如果是数组或者是对象,内部的数据是可以进行修改的
 * 3. 解构赋值
 *  1) 简化获取数组或者对象内部数据的操作
 *  
 * 4. 模版字符串
 *  简化字符串的拼接的使用,及大量字符串进行操作的时候
 * 5. 对象的简化写法
 *  1) 对象中的属性或者方法都可以使用外部定义的属性或者函数
 *  2) 对象中的方法,可以不使用function关键字来定义,直接书写最简单的方式
 *    如: var obj = {eat(){}}
 * 6. 箭头函数
 *  1) 箭头本质也是匿名函数,只是简化了function的写法
 *  2) 语法:  ()=>{}
 *  3) 如果没有参数或者参数个数大于等于2个的时候,小括号都不可以省略
 *  4) 如果参数是一个,那么小括号可以省略
 *  5) 如果有返回值,并且语句很少(只有一行)那么大括号可以省略
 *  6) 如果有返回值,并且语句很多,那么大括号不能省略,需要自己手动添加return
 *  7) 箭头函数内部的this,不能改变---->当前这个箭头函数外部的this 
 *  8) 内部是不能使用arguments的
 *  9) 不能作为构造函数来使用
 * 7. 函数的参数的默认值设置
 *  1) 函数的形参实际上是可以有默认值,一般情况,如果形参比较多,带有默认值的参数放在比较靠后的位置
 * 8. rest参数
 *  代替arguments的
 * 9. 扩展运算符
 *  1) 进行拆包和打包的操作
 *  2) 伪数组转真数组
 * 10. Symbol
 *  1) 一种数据类型
 *  2) 产生的内容是唯一的(虽然可以产生相同的内容,几乎不用)
 *  3) 可以在对象中使用,定义属性或者方法
 *  4) Symbol的数据如果要进行遍历,需要使用: Reflect.ownKeys(person)
 * 
 * 
 * 
 * 
 * 
 */